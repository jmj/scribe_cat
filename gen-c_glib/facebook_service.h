/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef FACEBOOK_SERVICE_H
#define FACEBOOK_SERVICE_H

#include "fb303_types.h"

/* FacebookService service interface */
typedef struct _FacebookServiceIf FacebookServiceIf;  /* dummy object */

struct _FacebookServiceIfInterface
{
  GTypeInterface parent;

  gboolean (*get_name) (FacebookServiceIf *iface, gchar ** _return, GError **error);
  gboolean (*get_version) (FacebookServiceIf *iface, gchar ** _return, GError **error);
  gboolean (*get_status) (FacebookServiceIf *iface, fb_status* _return, GError **error);
  gboolean (*get_status_details) (FacebookServiceIf *iface, gchar ** _return, GError **error);
  gboolean (*get_counters) (FacebookServiceIf *iface, GHashTable ** _return, GError **error);
  gboolean (*get_counter) (FacebookServiceIf *iface, gint64* _return, const gchar * key, GError **error);
  gboolean (*set_option) (FacebookServiceIf *iface, const gchar * key, const gchar * value, GError **error);
  gboolean (*get_option) (FacebookServiceIf *iface, gchar ** _return, const gchar * key, GError **error);
  gboolean (*get_options) (FacebookServiceIf *iface, GHashTable ** _return, GError **error);
  gboolean (*get_cpu_profile) (FacebookServiceIf *iface, gchar ** _return, const gint32 profileDurationInSec, GError **error);
  gboolean (*alive_since) (FacebookServiceIf *iface, gint64* _return, GError **error);
  gboolean (*reinitialize) (FacebookServiceIf *iface, GError **error);
  gboolean (*shutdown) (FacebookServiceIf *iface, GError **error);
};
typedef struct _FacebookServiceIfInterface FacebookServiceIfInterface;

GType facebook_service_if_get_type (void);
#define TYPE_FACEBOOK_SERVICE_IF (facebook_service_if_get_type())
#define FACEBOOK_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FACEBOOK_SERVICE_IF, FacebookServiceIf))
#define IS_FACEBOOK_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj, TYPE_FACEBOOK_SERVICE_IF))
#define FACEBOOK_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_FACEBOOK_SERVICE_IF, FacebookServiceIfInterface))

gboolean facebook_service_if_get_name (FacebookServiceIf *iface, gchar ** _return, GError **error);
gboolean facebook_service_if_get_version (FacebookServiceIf *iface, gchar ** _return, GError **error);
gboolean facebook_service_if_get_status (FacebookServiceIf *iface, fb_status* _return, GError **error);
gboolean facebook_service_if_get_status_details (FacebookServiceIf *iface, gchar ** _return, GError **error);
gboolean facebook_service_if_get_counters (FacebookServiceIf *iface, GHashTable ** _return, GError **error);
gboolean facebook_service_if_get_counter (FacebookServiceIf *iface, gint64* _return, const gchar * key, GError **error);
gboolean facebook_service_if_set_option (FacebookServiceIf *iface, const gchar * key, const gchar * value, GError **error);
gboolean facebook_service_if_get_option (FacebookServiceIf *iface, gchar ** _return, const gchar * key, GError **error);
gboolean facebook_service_if_get_options (FacebookServiceIf *iface, GHashTable ** _return, GError **error);
gboolean facebook_service_if_get_cpu_profile (FacebookServiceIf *iface, gchar ** _return, const gint32 profileDurationInSec, GError **error);
gboolean facebook_service_if_alive_since (FacebookServiceIf *iface, gint64* _return, GError **error);
gboolean facebook_service_if_reinitialize (FacebookServiceIf *iface, GError **error);
gboolean facebook_service_if_shutdown (FacebookServiceIf *iface, GError **error);

/* FacebookService service client */
struct _FacebookServiceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _FacebookServiceClient FacebookServiceClient;

struct _FacebookServiceClientClass
{
  GObjectClass parent;
};
typedef struct _FacebookServiceClientClass FacebookServiceClientClass;

GType facebook_service_client_get_type (void);
#define TYPE_FACEBOOK_SERVICE_CLIENT (facebook_service_client_get_type())
#define FACEBOOK_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FACEBOOK_SERVICE_CLIENT, FacebookServiceClient))
#define FACEBOOK_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_FACEBOOK_SERVICE_CLIENT, FacebookServiceClientClass))
#define FACEBOOK_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FACEBOOK_SERVICE_CLIENT))
#define FACEBOOK_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FACEBOOK_SERVICE_CLIENT))
#define FACEBOOK_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FACEBOOK_SERVICE_CLIENT, FacebookServiceClientClass))

gboolean facebook_service_client_get_name (FacebookServiceIf * iface, gchar ** _return, GError ** error);
gboolean facebook_service_client_send_get_name (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_recv_get_name (FacebookServiceIf * iface, gchar ** _return, GError ** error);
gboolean facebook_service_client_get_version (FacebookServiceIf * iface, gchar ** _return, GError ** error);
gboolean facebook_service_client_send_get_version (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_recv_get_version (FacebookServiceIf * iface, gchar ** _return, GError ** error);
gboolean facebook_service_client_get_status (FacebookServiceIf * iface, fb_status* _return, GError ** error);
gboolean facebook_service_client_send_get_status (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_recv_get_status (FacebookServiceIf * iface, fb_status* _return, GError ** error);
gboolean facebook_service_client_get_status_details (FacebookServiceIf * iface, gchar ** _return, GError ** error);
gboolean facebook_service_client_send_get_status_details (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_recv_get_status_details (FacebookServiceIf * iface, gchar ** _return, GError ** error);
gboolean facebook_service_client_get_counters (FacebookServiceIf * iface, GHashTable ** _return, GError ** error);
gboolean facebook_service_client_send_get_counters (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_recv_get_counters (FacebookServiceIf * iface, GHashTable ** _return, GError ** error);
gboolean facebook_service_client_get_counter (FacebookServiceIf * iface, gint64* _return, const gchar * key, GError ** error);
gboolean facebook_service_client_send_get_counter (FacebookServiceIf * iface, const gchar * key, GError ** error);
gboolean facebook_service_client_recv_get_counter (FacebookServiceIf * iface, gint64* _return, GError ** error);
gboolean facebook_service_client_set_option (FacebookServiceIf * iface, const gchar * key, const gchar * value, GError ** error);
gboolean facebook_service_client_send_set_option (FacebookServiceIf * iface, const gchar * key, const gchar * value, GError ** error);
gboolean facebook_service_client_recv_set_option (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_get_option (FacebookServiceIf * iface, gchar ** _return, const gchar * key, GError ** error);
gboolean facebook_service_client_send_get_option (FacebookServiceIf * iface, const gchar * key, GError ** error);
gboolean facebook_service_client_recv_get_option (FacebookServiceIf * iface, gchar ** _return, GError ** error);
gboolean facebook_service_client_get_options (FacebookServiceIf * iface, GHashTable ** _return, GError ** error);
gboolean facebook_service_client_send_get_options (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_recv_get_options (FacebookServiceIf * iface, GHashTable ** _return, GError ** error);
gboolean facebook_service_client_get_cpu_profile (FacebookServiceIf * iface, gchar ** _return, const gint32 profileDurationInSec, GError ** error);
gboolean facebook_service_client_send_get_cpu_profile (FacebookServiceIf * iface, const gint32 profileDurationInSec, GError ** error);
gboolean facebook_service_client_recv_get_cpu_profile (FacebookServiceIf * iface, gchar ** _return, GError ** error);
gboolean facebook_service_client_alive_since (FacebookServiceIf * iface, gint64* _return, GError ** error);
gboolean facebook_service_client_send_alive_since (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_recv_alive_since (FacebookServiceIf * iface, gint64* _return, GError ** error);
gboolean facebook_service_client_reinitialize (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_send_reinitialize (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_shutdown (FacebookServiceIf * iface, GError ** error);
gboolean facebook_service_client_send_shutdown (FacebookServiceIf * iface, GError ** error);

#endif /* FACEBOOK_SERVICE_H */
